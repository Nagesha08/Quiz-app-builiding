import React from 'react';
import { Trophy, Target, Clock, BookOpen, RotateCcw, Home, TrendingUp } from 'lucide-react';
import { QuizSession } from '../types/quiz';
import { getCategoryColor, getCategoryIcon } from '../data/questions';

interface QuizResultsProps {
  session: QuizSession;
  onRestart: () => void;
  onHome: () => void;
}

const QuizResults: React.FC<QuizResultsProps> = ({ session, onRestart, onHome }) => {
  const scorePercentage = Math.round((session.score / session.totalPoints) * 100);
  const correctAnswers = session.questions.filter(q => 
    session.answers[q.id] === q.correctAnswer
  ).length;
  
  const duration = session.endTime && session.startTime 
    ? Math.round((session.endTime.getTime() - session.startTime.getTime()) / 1000)
    : 0;

  const getScoreColor = (percentage: number) => {
    if (percentage >= 80) return 'from-green-400 to-emerald-500';
    if (percentage >= 60) return 'from-yellow-400 to-orange-500';
    return 'from-red-400 to-red-500';
  };

  const getScoreMessage = (percentage: number) => {
    if (percentage >= 90) return "Outstanding! You're a true expert! 🏆";
    if (percentage >= 80) return "Excellent work! You know your stuff! 🎉";
    if (percentage >= 70) return "Great job! You're doing well! 👏";
    if (percentage >= 60) return "Good effort! Keep practicing! 💪";
    return "Don't give up! Practice makes perfect! 📚";
  };

  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}m ${secs}s`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800">
      <div className="absolute inset-0 bg-black/20"></div>
      <div className="relative z-10 container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <div className={`inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r ${getCategoryColor(session.category)} rounded-full mb-6 text-3xl`}>
            {getCategoryIcon(session.category)}
          </div>
          <h1 className="text-4xl font-bold text-white mb-2">Quiz Complete!</h1>
          <p className="text-xl text-white/80">{session.category} Knowledge Test</p>
        </div>

        {/* Score Display */}
        <div className="max-w-2xl mx-auto mb-8">
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 text-center">
            <div className={`inline-flex items-center justify-center w-32 h-32 bg-gradient-to-r ${getScoreColor(scorePercentage)} rounded-full mb-6`}>
              <div className="text-4xl font-bold text-white">
                {scorePercentage}%
              </div>
            </div>
            <h2 className="text-2xl font-bold text-white mb-3">
              {getScoreMessage(scorePercentage)}
            </h2>
            <div className="text-lg text-white/80">
              You scored <span className="font-bold text-white">{session.score}</span> out of{' '}
              <span className="font-bold text-white">{session.totalPoints}</span> points
            </div>
          </div>
        </div>

        {/* Stats Grid */}
        <div className="max-w-4xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 text-center">
            <Target className="w-8 h-8 text-green-400 mx-auto mb-3" />
            <div className="text-3xl font-bold text-white mb-1">
              {correctAnswers}/{session.questions.length}
            </div>
            <div className="text-white/70">Correct Answers</div>
          </div>
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 text-center">
            <Clock className="w-8 h-8 text-blue-400 mx-auto mb-3" />
            <div className="text-3xl font-bold text-white mb-1">
              {formatDuration(duration)}
            </div>
            <div className="text-white/70">Time Taken</div>
          </div>
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 text-center">
            <TrendingUp className="w-8 h-8 text-purple-400 mx-auto mb-3" />
            <div className="text-3xl font-bold text-white mb-1">
              {session.questions.find(q => session.answers[q.id] === q.correctAnswer)?.difficulty === 'hard' ? 'Expert' :
               scorePercentage >= 80 ? 'Advanced' :
               scorePercentage >= 60 ? 'Intermediate' : 'Beginner'}
            </div>
            <div className="text-white/70">Performance Level</div>
          </div>
        </div>

        {/* Question Review */}
        <div className="max-w-4xl mx-auto mb-8">
          <h3 className="text-2xl font-bold text-white mb-6 text-center">Question Review</h3>
          <div className="space-y-4">
            {session.questions.map((question, index) => {
              const userAnswer = session.answers[question.id];
              const isCorrect = userAnswer === question.correctAnswer;
              
              return (
                <div 
                  key={question.id}
                  className={`bg-white/10 backdrop-blur-lg rounded-xl p-6 border-l-4 ${
                    isCorrect ? 'border-green-400' : 'border-red-400'
                  }`}
                >
                  <div className="flex items-start justify-between mb-3">
                    <h4 className="text-lg font-semibold text-white flex-1">
                      {index + 1}. {question.question}
                    </h4>
                    <div className="flex items-center space-x-2 ml-4">
                      {isCorrect ? (
                        <div className="bg-green-500 text-white px-3 py-1 rounded-full text-sm font-bold">
                          +{question.points}
                        </div>
                      ) : (
                        <div className="bg-red-500 text-white px-3 py-1 rounded-full text-sm font-bold">
                          0
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-white/70">Your answer: </span>
                      <span className={`font-semibold ${isCorrect ? 'text-green-400' : 'text-red-400'}`}>
                        {typeof userAnswer === 'number' ? question.options[userAnswer] : 'Not answered'}
                      </span>
                    </div>
                    <div>
                      <span className="text-white/70">Correct answer: </span>
                      <span className="font-semibold text-green-400">
                        {question.options[question.correctAnswer]}
                      </span>
                    </div>
                  </div>
                  
                  {!isCorrect && (
                    <div className="mt-3 p-3 bg-blue-500/20 rounded-lg">
                      <span className="text-blue-300 font-semibold">Explanation: </span>
                      <span className="text-white/90">{question.explanation}</span>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center max-w-md mx-auto">
          <button
            onClick={onRestart}
            className="flex items-center justify-center px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-bold rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all duration-300 hover:scale-105 shadow-lg"
          >
            <RotateCcw className="w-5 h-5 mr-2" />
            Try Again
          </button>
          <button
            onClick={onHome}
            className="flex items-center justify-center px-6 py-3 bg-white/20 backdrop-blur-lg text-white font-bold rounded-xl hover:bg-white/30 transition-all duration-300 hover:scale-105 border border-white/30"
          >
            <Home className="w-5 h-5 mr-2" />
            Home
          </button>
        </div>
      </div>
    </div>
  );
};

export default QuizResults;
